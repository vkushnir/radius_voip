# -*- text -*-
##
## sql.conf -- SQL modules
##
##	$Id$

######################################################################
#
#  Configuration for the SQL module
#
#  The database schemas and queries are located in subdirectories:
#
#	sql/DB/schema.sql	Schema
#	sql/DB/dialup.conf	Basic dialup (including policy) queries
#	sql/DB/counter.conf	counter
#	sql/DB/ippool.conf	IP Pools in SQL
#	sql/DB/ippool.sql	schema for IP pools.
#
#  Where "DB" is mysql, mssql, oracle, or postgresql.
#
sql {
	database = "$ENV{DB_DRIVER}"
	driver = "rlm_sql_${database}"

	# Connection info:
	server = "$ENV{DB_SERVER}"
	login = "$ENV{DB_USER}"
	password = "$ENV{DB_PASSWORD}"
	dbname = "$ENV{DB_NAME}"
	dbport = "$ENV{DB_PORT}"
	# Database table configuration for everything except Oracle
	radius_db = "(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=${server})(PORT=${dbport}))(CONNECT_DATA=(SID=${dbname})))"
	# If you want both stop and start records logged to the
	# same SQL table, leave this as is.  If you want them in
	# different tables, put the start table in acct_table1
	# and stop table in acct_table2
	acct_table1 = "$ENV{RAD_ACCT1}"
	acct_table2 = "$ENV{RAD_ACCT2}"

	# Allow for storing data after authentication
	postauth_table = "$ENV{RAD_POSTAUTH}"

	authcheck_table = "$ENV{RAD_CHECK}"
	authreply_table = "$ENV{RAD_REPLY}"

	groupcheck_table = "$ENV{RAD_GROUPCHECK}"
	groupreply_table = "$ENV{RAD_GROUPREPLY}"

	# Table to keep group info
	usergroup_table = "$ENV{RAD_USERGROUP}"

	# If set to 'yes' (default) we read the group tables
	# If set to 'no' the user MUST have Fall-Through = Yes in the radreply table
	read_groups = $ENV{READ_GROUPS}

	# Remove stale session if checkrad does not see a double login
	deletestalesessions = $ENV{DELETE_STALE}

	# Print all SQL statements when in debug mode (-x)
	sqltrace = $ENV{SQL_TRACE}
	sqltracefile = ${logdir}/sqltrace.sql

	# number of sql connections to make to server
	num_sql_socks = $ENV{SQL_SOCKS}

	# number of seconds to dely retrying on a failed database
	# connection (per_socket)
	connect_failure_retry_delay = $ENV{SQL_DELAY}

	# lifetime of an SQL socket.  If you are having network issues
	# such as TCP sessions expiring, you may need to set the socket
	# lifetime.  If set to non-zero, any open connections will be
	# closed "lifetime" seconds after they were first opened.
	lifetime = $ENV{SQL_LIFETIME}

	# Maximum number of queries used by an SQL socket.  If you are
	# having issues with SQL sockets lasting "too long", you can
	# limit the number of queries performed over one socket.  After
	# "max_qeuries", the socket will be closed.  Use 0 for "no limit".
	max_queries = $ENV{SQL_QUERIES}

	# Set to 'yes' to read radius clients from the database ('nas' table)
	# Clients will ONLY be read on server startup.  For performance
	# and security reasons, finding clients via SQL queries CANNOT
	# be done "live" while the server is running.
	# 
	readclients = $ENV{READ_CLIENTS}

	# Table to keep radius client info
	nas_table = "$ENV{NAS}"

	safe-characters = "#();@abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789.+-_: /"

	# Read driver-specific configuration
	$INCLUDE sql/${database}/dialup.conf
}
